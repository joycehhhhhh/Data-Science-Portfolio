{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# __Customer Renewal Factors Analysis__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Data Preparation: Assign Renewal/Canceling with a number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "df_new=pd.read_csv('new.csv')\n",
    "df_new['OPPORTUNITY_CLOSE_DATE'] = pd.to_datetime(df_new['OPPORTUNITY_CLOSE_DATE'])\n",
    "df_new['Year'] = pd.to_datetime(df_new['OPPORTUNITY_CLOSE_DATE']).dt.year\n",
    "df_new=df_new.loc[df_new['Year']<2022]\n",
    "df_new=df_new.dropna(subset=['PRID', 'Year'])\n",
    "for idx, row in df_new.iterrows():\n",
    "    if row['STAGENAME'] == 'Lost':\n",
    "        df_new.loc[idx, 'Status'] = 0\n",
    "    if row['STAGENAME'] == 'Invoiced':\n",
    "        df_new.loc[idx, 'Status'] = 1\n",
    "    if row['STAGENAME'] == 'Won':\n",
    "        df_new.loc[idx, 'Status'] = 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1 Match Customer Data with Usage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PRID</th>\n",
       "      <th>TYPE</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>Article Output</th>\n",
       "      <th>Wiley Lead Author Articles</th>\n",
       "      <th>Cost per Access</th>\n",
       "      <th>TOTAL_FTD</th>\n",
       "      <th>STAND_COUNTRY_NAME</th>\n",
       "      <th>WILEY_GROUP</th>\n",
       "      <th>TA_MODEL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2092</td>\n",
       "      <td>academic</td>\n",
       "      <td>2017</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.030563</td>\n",
       "      <td>127580.0</td>\n",
       "      <td>United States</td>\n",
       "      <td>Americas</td>\n",
       "      <td>pending</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2533</td>\n",
       "      <td>academic</td>\n",
       "      <td>2017</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>United States</td>\n",
       "      <td>Americas</td>\n",
       "      <td>pending</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>406013</td>\n",
       "      <td>academic</td>\n",
       "      <td>2017</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Poland</td>\n",
       "      <td>EMEA</td>\n",
       "      <td>pending</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>416077</td>\n",
       "      <td>other/edu</td>\n",
       "      <td>2017</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Japan</td>\n",
       "      <td>APAC</td>\n",
       "      <td>pending</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>417430</td>\n",
       "      <td>hospital</td>\n",
       "      <td>2017</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>Americas</td>\n",
       "      <td>pending</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152545</th>\n",
       "      <td>249180</td>\n",
       "      <td>other/psych</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Netherlands</td>\n",
       "      <td>EMEA</td>\n",
       "      <td>pending</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152546</th>\n",
       "      <td>277205</td>\n",
       "      <td>other/museum</td>\n",
       "      <td>2021</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Romania</td>\n",
       "      <td>EMEA</td>\n",
       "      <td>pending</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152547</th>\n",
       "      <td>287791</td>\n",
       "      <td>academic</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>81.0</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>Americas</td>\n",
       "      <td>pending</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152548</th>\n",
       "      <td>293655</td>\n",
       "      <td>academic/gen</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>757.0</td>\n",
       "      <td>Russian Federation</td>\n",
       "      <td>EMEA</td>\n",
       "      <td>pending</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152549</th>\n",
       "      <td>186607</td>\n",
       "      <td>academic/gen</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Croatia</td>\n",
       "      <td>EMEA</td>\n",
       "      <td>pending</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>152550 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          PRID          TYPE  YEAR  Article Output  \\\n",
       "0         2092      academic  2017             0.0   \n",
       "1         2533      academic  2017             0.0   \n",
       "2       406013      academic  2017             0.0   \n",
       "3       416077     other/edu  2017             0.0   \n",
       "4       417430      hospital  2017             0.0   \n",
       "...        ...           ...   ...             ...   \n",
       "152545  249180   other/psych  2021             0.0   \n",
       "152546  277205  other/museum  2021             3.0   \n",
       "152547  287791      academic  2021             0.0   \n",
       "152548  293655  academic/gen  2021             0.0   \n",
       "152549  186607  academic/gen  2021             0.0   \n",
       "\n",
       "        Wiley Lead Author Articles  Cost per Access  TOTAL_FTD  \\\n",
       "0                              0.0         6.030563   127580.0   \n",
       "1                              0.0         0.000000        0.0   \n",
       "2                              0.0         0.000000        0.0   \n",
       "3                              0.0         0.000000        0.0   \n",
       "4                              0.0         0.000000        0.0   \n",
       "...                            ...              ...        ...   \n",
       "152545                         0.0         0.000000        0.0   \n",
       "152546                         0.0         0.000000        0.0   \n",
       "152547                         0.0         0.000000       81.0   \n",
       "152548                         0.0         0.000000      757.0   \n",
       "152549                         0.0         0.000000        0.0   \n",
       "\n",
       "        STAND_COUNTRY_NAME WILEY_GROUP TA_MODEL  \n",
       "0            United States    Americas  pending  \n",
       "1            United States    Americas  pending  \n",
       "2                   Poland        EMEA  pending  \n",
       "3                    Japan        APAC  pending  \n",
       "4                   Brazil    Americas  pending  \n",
       "...                    ...         ...      ...  \n",
       "152545         Netherlands        EMEA  pending  \n",
       "152546             Romania        EMEA  pending  \n",
       "152547              Brazil    Americas  pending  \n",
       "152548  Russian Federation        EMEA  pending  \n",
       "152549             Croatia        EMEA  pending  \n",
       "\n",
       "[152550 rows x 10 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_us=pd.read_csv('usage.csv')\n",
    "df_us=df_us[['PRID','TYPE','YEAR','LEAD_AUTHOR_SUB_ART','LEAD_AUTHOR_OA_ART','LEAD_AUTHOR_OO_ART','WILEY_LEAD_AUTHOR_SUB_ART','WILEY_LEAD_AUTHOR_OA_ART','WILEY_LEAD_AUTHOR_OO_ART','LICENSED_FEES','FF_FTD','TOTAL_FTD','STAND_COUNTRY_NAME','WILEY_GROUP','TA_MODEL']]\n",
    "df_us['YEAR']=df_us['YEAR'].astype('object')\n",
    "df_us=df_us.dropna(subset=['PRID'])\n",
    "df_us[\"LEAD_AUTHOR_SUB_ART\"]=df_us[\"LEAD_AUTHOR_SUB_ART\"].fillna(0)\n",
    "df_us[\"LEAD_AUTHOR_OA_ART\"]=df_us[\"LEAD_AUTHOR_OA_ART\"].fillna(0)\n",
    "df_us[\"LEAD_AUTHOR_OO_ART\"]=df_us[\"LEAD_AUTHOR_OO_ART\"].fillna(0)\n",
    "df_us['WILEY_LEAD_AUTHOR_SUB_ART']=df_us['WILEY_LEAD_AUTHOR_SUB_ART'].fillna(0)\n",
    "df_us[\"WILEY_LEAD_AUTHOR_OA_ART\"]=df_us[\"WILEY_LEAD_AUTHOR_OA_ART\"].fillna(0)\n",
    "df_us[\"WILEY_LEAD_AUTHOR_OO_ART\"]=df_us[\"WILEY_LEAD_AUTHOR_OO_ART\"].fillna(0)\n",
    "df_us[\"LICENSED_FEES\"]=df_us[\"LICENSED_FEES\"].fillna(0)\n",
    "df_us[\"TA_MODEL\"]=df_us[\"TA_MODEL\"].fillna('pending')\n",
    "df_us[\"FF_FTD\"]=df_us[\"FF_FTD\"].fillna(0)\n",
    "df_us[\"TOTAL_FTD\"]=df_us[\"TOTAL_FTD\"].fillna(0)\n",
    "df_us[\"Article Output\"]=df_us[\"LEAD_AUTHOR_SUB_ART\"]+df_us[\"LEAD_AUTHOR_OA_ART\"]+df_us[\"LEAD_AUTHOR_OO_ART\"]\n",
    "df_us['Cost per Access']=df_us['LICENSED_FEES']/df_us['FF_FTD']\n",
    "df_us[\"Cost per Access\"]=df_us[\"Cost per Access\"].fillna(0)\n",
    "df_us['Wiley Lead Author Articles']=df_us['WILEY_LEAD_AUTHOR_SUB_ART']+df_us['WILEY_LEAD_AUTHOR_OA_ART']+df_us['WILEY_LEAD_AUTHOR_OO_ART']\n",
    "df_us=df_us[['PRID','TYPE','YEAR','Article Output','Wiley Lead Author Articles','Cost per Access','TOTAL_FTD','STAND_COUNTRY_NAME','WILEY_GROUP','TA_MODEL']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 Create Dataframe for Each Year for Future Reference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_18=df_new.loc[df_new['Year']==2018]\n",
    "df_19=df_new.loc[df_new['Year']==2019]\n",
    "df_20=df_new.loc[df_new['Year']==2020]\n",
    "df_21=df_new.loc[df_new['Year']==2021]\n",
    "\n",
    "dfus_18=df_us.loc[df_us['YEAR']==2018]\n",
    "dfus_19=df_us.loc[df_us['YEAR']==2019]\n",
    "dfus_20=df_us.loc[df_us['YEAR']==2020]\n",
    "dfus_21=df_us.loc[df_us['YEAR']==2021]\n",
    "\n",
    "df_18=df_18.merge(dfus_18, how='left', on='PRID')\n",
    "df_18=df_18.drop_duplicates(subset='PRID')\n",
    "df_19=df_19.merge(dfus_19, how='left', on='PRID')\n",
    "df_19=df_19.drop_duplicates(subset='PRID')\n",
    "df_20=df_20.merge(dfus_20, how='left', on='PRID')\n",
    "df_20=df_20.drop_duplicates(subset='PRID')\n",
    "df_21=df_21.merge(dfus_21, how='left', on='PRID')\n",
    "df_21=df_21.drop_duplicates(subset='PRID')\n",
    "\n",
    "frames = [df_18,df_19, df_20, df_21]\n",
    "df= pd.concat(frames)\n",
    "#df[\"TIER_1_CLASSIFICATION\"]=df[\"TIER_1_CLASSIFICATION\"].fillna('pending')\n",
    "#df=df.loc[df['TIER_1_CLASSIFICATION']=='Corporate']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.3 Clean up The Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AMOUNT_USD</th>\n",
       "      <th>Status</th>\n",
       "      <th>Article Output</th>\n",
       "      <th>Wiley Lead Author Articles</th>\n",
       "      <th>Cost per Access</th>\n",
       "      <th>TOTAL_FTD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>175.00000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.034183</td>\n",
       "      <td>134797.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>43195.34000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.674357</td>\n",
       "      <td>16104.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3881.99000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1098.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26636.45000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.409283</td>\n",
       "      <td>131105.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>295.00000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.424606</td>\n",
       "      <td>476285.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10442</th>\n",
       "      <td>66569.07188</td>\n",
       "      <td>1.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10452</th>\n",
       "      <td>566585.07660</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>253806.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10454</th>\n",
       "      <td>56580.70800</td>\n",
       "      <td>1.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10455</th>\n",
       "      <td>8500.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10456</th>\n",
       "      <td>3920.80200</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>17978 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         AMOUNT_USD  Status  Article Output  Wiley Lead Author Articles  \\\n",
       "0         175.00000     1.0             0.0                         0.0   \n",
       "1       43195.34000     1.0             0.0                         0.0   \n",
       "2        3881.99000     1.0             0.0                         0.0   \n",
       "3       26636.45000     1.0             0.0                         0.0   \n",
       "4         295.00000     1.0             0.0                         0.0   \n",
       "...             ...     ...             ...                         ...   \n",
       "10442   66569.07188     1.0            88.0                         7.0   \n",
       "10452  566585.07660     1.0             0.0                         0.0   \n",
       "10454   56580.70800     1.0            68.0                         1.0   \n",
       "10455    8500.00000     0.0             0.0                         0.0   \n",
       "10456    3920.80200     1.0             0.0                         0.0   \n",
       "\n",
       "       Cost per Access  TOTAL_FTD  \n",
       "0             6.034183   134797.0  \n",
       "1             2.674357    16104.0  \n",
       "2             0.000000     1098.0  \n",
       "3             2.409283   131105.0  \n",
       "4             5.424606   476285.0  \n",
       "...                ...        ...  \n",
       "10442         0.000000        0.0  \n",
       "10452         0.000000   253806.0  \n",
       "10454         0.000000        0.0  \n",
       "10455         0.000000        0.0  \n",
       "10456         0.000000        0.0  \n",
       "\n",
       "[17978 rows x 6 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.drop('OPPORTUNITY_ID',axis='columns')\n",
    "df=df.drop('OPPORTUNITY_NAME',axis='columns')\n",
    "df=df.drop('STAGENAME',axis='columns')\n",
    "df=df.drop('STAGENAME_NUMBER',axis='columns')\n",
    "df=df.drop('OPPORTUNITY_OWNER_SFDC_GROUP',axis='columns')\n",
    "df=df.drop('OPPORTUNITY_CLOSE_DATE',axis='columns')\n",
    "df=df.drop('LOST_REASON',axis='columns')\n",
    "df=df.drop('Year',axis='columns')\n",
    "df=df.drop('YEAR',axis='columns')\n",
    "df=df.drop('ACCOUNT_ID',axis='columns')\n",
    "df=df.drop('ACCOUNT_NAME',axis='columns')\n",
    "df=df.drop('ULTIMATE_PARENT_ACCOUNT_ID',axis='columns')\n",
    "df=df.drop('ULTIMATE_PARENT_ACCOUNT_NAME',axis='columns')\n",
    "df=df.drop('MARKETING_IMPACTED_FLAG',axis='columns')\n",
    "df=df.drop('MARKETING_INFLUENCE_FLAG',axis='columns')\n",
    "df=df.drop('MARKETING_SUPPORTED_FLAG',axis='columns')\n",
    "df=df.drop('COUNTRY',axis='columns')\n",
    "df=df.drop('PROBABILITY',axis='columns')\n",
    "df=df.drop('CREATED_DATE',axis='columns')\n",
    "df=df.drop('TIER_2_CLASSIFICATION',axis='columns')\n",
    "df=df.drop('ECID',axis='columns')\n",
    "df=df.drop('WINTOUCH_ID',axis='columns')\n",
    "df=df.drop('WILEY_DUNS_NUMBER',axis='columns')\n",
    "df=df.drop('RINGGOLD_ID',axis='columns')\n",
    "df=df.drop('ROOT_INSTITUTIONAL_DOMAIN_ACCOUNT',axis='columns')\n",
    "df=df.drop('GAINSIGHT_ID',axis='columns')\n",
    "df=df.drop('CURRENT_SCORE_COLOR__C',axis='columns')\n",
    "df=df.drop('CONSORTIA_NAME__C',axis='columns')\n",
    "df=df.drop('RETENTION_ATTRIBUTION',axis='columns')\n",
    "df=df.drop('RECORDTYPE_ID',axis='columns')\n",
    "df=df.drop('PRID',axis='columns')\n",
    "df=df.drop('CHANNEL',axis='columns')\n",
    "df=df.drop('TYPE',axis='columns')\n",
    "df=df.drop('OPPORTUNITY_TYPE',axis='columns')\n",
    "df=df.drop('OPPORTUNITY_RECORDTYPE',axis='columns')\n",
    "df=df.drop('TIER_1_CLASSIFICATION',axis='columns')\n",
    "df=df.drop('TIER__C',axis='columns')\n",
    "df=df.drop('TA_MODEL',axis='columns')\n",
    "df=df.drop('STAND_COUNTRY_NAME',axis='columns')\n",
    "df=df.drop('WILEY_GROUP',axis='columns')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.4 Replace Invalid Number with \"0\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df[\"OPPORTUNITY_TYPE\"]=df[\"OPPORTUNITY_TYPE\"].fillna('pending')\n",
    "#df[\"TIER_1_CLASSIFICATION\"]=df[\"TIER_1_CLASSIFICATION\"].fillna('pending')\n",
    "#df[\"TIER__C\"]=df[\"TIER__C\"].fillna('pending')\n",
    "#df[\"OPPORTUNITY_RECORDTYPE\"]=df[\"OPPORTUNITY_RECORDTYPE\"].fillna('pending')\n",
    "df[\"Cost per Access\"].replace([np.inf, -np.inf], 0, inplace=True)\n",
    "df[\"Article Output\"]=df[\"Article Output\"].fillna(0)\n",
    "df[\"Wiley Lead Author Articles\"]=df[\"Wiley Lead Author Articles\"].fillna(0)\n",
    "df[\"Cost per Access\"]=df[\"Cost per Access\"].fillna(0)\n",
    "df[\"TOTAL_FTD\"]=df[\"TOTAL_FTD\"].fillna(0)\n",
    "\n",
    "#df=df.drop('TIER_1_CLASSIFICATION',axis='columns')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Data Manipulation: Standardize Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import tree\n",
    "from sklearn.tree import DecisionTreeClassifier, export_graphviz\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, r2_score\n",
    "#df=df.drop('AMOUNT_USD',axis='columns')\n",
    "df_x=df.drop('Status',axis='columns')\n",
    "scale_vars = list(df_x)\n",
    "scaler = MinMaxScaler()\n",
    "df[scale_vars] = scaler.fit_transform(df[scale_vars])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1 Deal With Imbalanced Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original dataset shape Counter({1: 14489, 0: 3489})\n",
      "Resampled dataset shape Counter({0: 3489, 1: 3489})\n"
     ]
    }
   ],
   "source": [
    "from imblearn.under_sampling import NearMiss\n",
    "nm = NearMiss()\n",
    "X = df.drop('Status',axis='columns')\n",
    "y = df['Status']\n",
    "y=y.astype('int32')\n",
    "X_res,y_res=nm.fit_resample(X,y)\n",
    "X_res.shape,y_res.shape\n",
    "from collections import Counter\n",
    "print('Original dataset shape {}'.format(Counter(y)))\n",
    "print('Resampled dataset shape {}'.format(Counter(y_res)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Fitting the Model and Calculate the Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy is:  0.8435708435708436\n",
      "Testing Accuracy is:  0.8051575931232091\n"
     ]
    }
   ],
   "source": [
    "X = X_res\n",
    "y = y_res\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2)\n",
    "dt = DecisionTreeClassifier(criterion='entropy', max_depth=10, random_state=2)\n",
    "dt.fit(X_train, y_train)\n",
    "# Accuracy on Train\n",
    "print(\"Training Accuracy is: \", dt.score(X_train, y_train))\n",
    "# Accuracy on Train\n",
    "print(\"Testing Accuracy is: \", dt.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Make Feature Importance Score Table (Based on the Selected Model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Importance of feature AMOUNT_USD:, 0.180\n",
      "Importance of feature Article Output:, 0.556\n",
      "Importance of feature Wiley Lead Author Articles:, 0.012\n",
      "Importance of feature Cost per Access:, 0.103\n",
      "Importance of feature TOTAL_FTD:, 0.148\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Variable</th>\n",
       "      <th>Feature Importance Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Article Output</td>\n",
       "      <td>0.556188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>AMOUNT_USD</td>\n",
       "      <td>0.180247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>TOTAL_FTD</td>\n",
       "      <td>0.147967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Cost per Access</td>\n",
       "      <td>0.103230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>Wiley Lead Author Articles</td>\n",
       "      <td>0.012367</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index                    Variable  Feature Importance Score\n",
       "0      1              Article Output                  0.556188\n",
       "1      0                  AMOUNT_USD                  0.180247\n",
       "2      4                   TOTAL_FTD                  0.147967\n",
       "3      3             Cost per Access                  0.103230\n",
       "4      2  Wiley Lead Author Articles                  0.012367"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i, column in enumerate(X):\n",
    "    print('Importance of feature {}:, {:.3f}'.format(column, dt.feature_importances_[i]))\n",
    "    \n",
    "    fi = pd.DataFrame({'Variable': [column], 'Feature Importance Score': [dt.feature_importances_[i]]})\n",
    "    \n",
    "    try:\n",
    "        final_fi = pd.concat([final_fi,fi], ignore_index = True)\n",
    "    except:\n",
    "        final_fi = fi\n",
    "        \n",
    "        \n",
    "# Ordering the data\n",
    "final_fi = final_fi.sort_values('Feature Importance Score', ascending = False).reset_index()            \n",
    "final_fi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Make the Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import tree\n",
    "from sklearn.tree import DecisionTreeClassifier, export_graphviz\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, r2_score\n",
    "import numpy as np \n",
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns\n",
    "def plot_confusion_matrix(cm, classes=None, title='Confusion matrix'):\n",
    "    \"\"\"Plots a confusion matrix.\"\"\"\n",
    "    if classes is not None:\n",
    "        sns.heatmap(cm, xticklabels=classes, yticklabels=classes, vmin=0., vmax=1., annot=True, annot_kws={'size':50})\n",
    "    else:\n",
    "        sns.heatmap(cm, vmin=0., vmax=1.)\n",
    "    plt.title(title)\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')\n",
    "    \n",
    "y_pred = dt.predict(X_train)\n",
    "\n",
    "# Plotting Confusion Matrix\n",
    "cm = confusion_matrix(y_train, y_pred)\n",
    "cm_norm = cm/cm.sum(axis=1)[:, np.newaxis]\n",
    "plt.figure()\n",
    "plot_confusion_matrix(cm_norm, classes=dt.classes_, title='Training confusion')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
